openapi: 3.0.3
info:
  title: Swagger Store - OpenAPI 3.0
  description: |-
    This is a sample E-Commerce Server designed to showcase a robust API for managing products, users, and transactions, built on OpenAPI 3.0 specifications. Explore how the design-first approach empowers developers to collaboratively enhance the API definition and its implementation. Whether you aim to streamline authentication, handle product management, or integrate payment systems like Stripe, this API is a flexible foundation for modern e-commerce applications.
    
    Some useful links:
    - [The Pet Store repository](https://github.com/jffc-dev/nerderyAPI)
    - [The source API definition for the Pet Store](https://github.com/jffc-dev/nerderyAPI/blob/master/swagger.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://jffc-dev.github.io/nerderyAPI/
tags:
  - name: product
    description: Operations about products
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: cart
    description: Access to cart
    externalDocs:
      description: Find info about cart
      url: http://swagger.io
  - name: user
    description: Operations about user
  - name: order
    description: Operations about orders
  - name: category
    description: Operations about categories
paths:
  /product:
    get:
      summary: List all product paginated. They can be filtered by category.
      tags:
        - product
      description: Retrieve a paginated list of products. Products are visible to both logged-in and non-logged-in users.
      parameters:
        - name: category
          in: query
          description: Category to filter.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of products.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
        '500':
          description: Internal server error.
    post:
      tags:
        - product
      summary: Create a new product
      description: Allows a manager to create a new product.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input.
        '403':
          description: Forbidden. Only managers can perform this action.
  /product/{productId}:
    get:
      tags:
        - product
      summary: Get product details
      description: Retrieve detailed information about a specific product.
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found.
    put:
      tags:
        - product
      summary: Update a product
      description: Allows a manager to update product information.
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          description: ID of the product to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input.
        '403':
          description: Forbidden. Only managers can perform this action.
        '404':
          description: Product not found.
    delete:
      tags:
        - product
      summary: Delete a product
      description: Allows a manager to delete a product.
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          description: ID of the product to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully.
        '403':
          description: Forbidden. Only managers can perform this action.
        '404':
          description: Product not found.
  /product/{productId}/like:
    post:
      tags:
        - product
      summary: Add or remove the like to a product
      description: Marks a product as liked by the authenticated user.
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the product to like.
      responses:
        '200':
          description: Product liked successfully.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ApiResponse'
  /product/{productId}/uploadImage:
    post:
      tags:
        - product
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: productId
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: The images to upload.
              required:
                - files
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - bearerAuth: []
  /cart:
    post:
      tags:
        - cart
      summary: Add a product to the cart
      description: Adds a product to the authenticated user's shopping cart.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartDetail'             
      responses:
        '200':
          description: Product added to the cart successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart' 
    get:
      tags:
        - cart
      summary: Get the cart content
      description: Retrieves the content of the authenticated user's shopping cart.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    delete:
      tags:
        - cart
      summary: Remove a product from the cart
      description: Removes a specific product from the authenticated user's shopping cart.
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: query
          description: ID of the product to remove from the cart.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Cart Detail removed successfully.
        '400':
          description: Invalid product ID or cart detail.
        '404':
          description: Product not found in the cart.
    patch:
      tags:
        - cart
      summary: Update the quantity of a product in the cart
      description: Updates the quantity of a specific product in the authenticated user's shopping cart.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: ID of the product to update.
                  example: "12345"
                quantity:
                  type: integer
                  description: The new quantity of the product.
                  example: 3
              required:
                - productId
                - quantity
      responses:
        '204':
          description: Cart Detail update successfully.
        '400':
          description: Invalid product ID or cart detail.
        '404':
          description: Product not found in the cart.
  /user/auth/sign-up:
    post:
      tags:
        - user
      summary: Register user
      description: For new users.
      operationId: registerUser
      requestBody:
        description: Registered user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUser'
          application/xml:
            schema:
              $ref: '#/components/schemas/CustomerUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerUser'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomerUser'
  /user/auth/sign-in:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user email for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/auth/sign-out:
    post:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
        '500':
          description: Internal server error.
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user ID
      description: ''
      operationId: getUserByName
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUser'          
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomerUser'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - bearerAuth: []
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUser'
          application/xml:
            schema:
              $ref: '#/components/schemas/CustomerUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerUser'
      responses:
        default:
          description: successful operation
      security:
        - bearerAuth: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - bearerAuth: []
  /user/auth/forgotPassword:
    post:
      tags:
        - user
      summary: Forgot password
      description: Allows a user to request a password reset link if they've forgotten their password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address associated with the user account.
              required:
                - email
      responses:
        '200':
          description: Password reset link sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset link sent to your email.
        '404':
          description: Email not found in the system.
  /user/auth/resetPassword:
    post:
      tags:
        - user
      summary: Reset password
      description: Allows a user to reset their password using a token received from the forgot password step.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The password reset token sent to the user's email.
                newPassword:
                  type: string
                  description: The new password to set.
              required:
                - token
                - newPassword
      responses:
        '200':
          description: Password reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully.
        '400':
          description: Invalid or expired reset token.
        '404':
          description: User not found.
  /order:
    post:
      tags:
        - order
      summary: Create a new order
      description: Creates an order based on the authenticated user's cart and payment details.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput' 
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error.
  /order/{orderId}:
    get:
      tags:
        - order
      summary: Get an order by ID
      description: Retrieves the details of a specific order for the authenticated user.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the order to retrieve.
      responses:
        '200':
          description: Order retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    delete:
      tags:
        - order
      summary: Remove an order
      description: Removes a specific order.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: query
          description: ID of the order to remove.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order removed successfully.
        '400':
          description: Invalid order ID.
        '404':
          description: Order not found.
  /user/{userId}/orders:
    get:
      tags:
        - user
      summary: List orders by user
      description: Retrieves a list of orders for a specific user. The orders will be returned in paginated form.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose orders are to be listed.
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            description: The page number for paginated results.
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
            description: The number of orders to retrieve per page.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of orders for the specified user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalOrders:
                    type: integer
                    description: Total number of orders for the user.
                  currentPage:
                    type: integer
                    description: The current page number.
                  totalPages:
                    type: integer
                    description: The total number of pages available.
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        orderId:
                          type: string
                          description: The unique identifier for the order.
                        status:
                          type: string
                          description: The status of the order (e.g., "pending", "shipped").
                        total:
                          type: number
                          format: float
                          description: The total price of the order.
                        createdAt:
                          type: string
                          format: date-time
                          description: The date when the order was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date when the order was last updated.
        '401':
          description: Unauthorized. The user must be authenticated to access their orders.
        '404':
          description: User not found. The provided userId does not match any existing user.
        '500':
          description: Internal server error.
  /category:
    get:
      summary: List all categories
      tags:
        - category
      description: Retrieve a list of categories.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error.
    post:
      tags:
        - category
      summary: Create a new Category
      description: Allows a manager to create a new Category.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input.
        '403':
          description: Forbidden. Only managers can perform this action.
  /category/{categoryId}:
    get:
      tags:
        - category
      summary: Get category details
      description: Retrieve detailed information about a specific category.
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found.
    put:
      tags:
        - category
      summary: Update a category
      description: Allows a manager to update category information.
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input.
        '403':
          description: Forbidden. Only managers can perform this action.
        '404':
          description: Category not found.
    delete:
      tags:
        - category
      summary: Delete a category
      description: Allows a manager to delete a category.
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category deleted successfully.
        '403':
          description: Forbidden. Only managers can perform this action.
        '404':
          description: Category not found.
  /role:
    get:
      summary: List all roles
      tags:
        - role
      description: Retrieve a list of roles.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of roles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '500':
          description: Internal server error.
    post:
      tags:
        - role
      summary: Create a new Role
      description: Allows a manager to create a new Role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInput'
      responses:
        '201':
          description: Role created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input.
        '403':
          description: Forbidden. Only managers can perform this action.
  /role/{roleId}:
    get:
      tags:
        - role
      summary: Get role details
      description: Retrieve detailed information about a specific role.
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          description: ID of the role to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Role details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Role not found.
    put:
      tags:
        - role
      summary: Update a role
      description: Allows a manager to update role information.
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          description: ID of the role to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInput'
      responses:
        '200':
          description: Role updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input.
        '403':
          description: Forbidden. Only managers can perform this action.
        '404':
          description: Role not found.
    delete:
      tags:
        - role
      summary: Delete a role
      description: Allows a manager to delete a role.
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          description: ID of the role to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Role deleted successfully.
        '403':
          description: Forbidden. Only managers can perform this action.
        '404':
          description: Role not found.
  /payment:
    post:
      tags:
        - payment
      summary: Create a new payment
      description: Creates an payment based on the order.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInput' 
      responses:
        '201':
          description: Payment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '500':
          description: Internal server error.
  /payment/checkout/{orderId}:
    post:
      tags:
        - payment
      summary: Initiate product checkout session
      description: This endpoint initiates a checkout process for a specified product.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the order to pay.
      responses:
        '201':
          description: Payment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '500':
          description: Internal server error.
  /payment/{paymentId}:
    get:
      tags:
        - payment
      summary: Get payment details
      description: Retrieve detailed information about a specific payment.
      security:
        - bearerAuth: []
      parameters:
        - name: paymentId
          in: path
          description: ID of the payment to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found.
    
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
    CategoryInput:
      allOf: 
        - $ref: "#/components/schemas/Category"
        - type: object
          required:
            - name
            - description
    Product:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: number
        is_active:
          type: boolean
        images:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Category"
    ProductInput:
      allOf: 
        - $ref: "#/components/schemas/Product"
        - type: object
          required:
            - name
            - description
            - price
            - is_active
            - images
            - categories
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        total:
          type: number
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        details:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/OrderDetail"
        payment:
          type: object
          $ref: "#/components/schemas/Payment"
      xml:
        name: order
    OrderDetail:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        product:
          type: object
          $ref: "#/components/schemas/Product"
        quantity:
          type: integer
          format: int32
          example: 7
        unitPrice:
          type: number
        subtotal:
          type: number
      xml:
        name: orderDetail
    OrderInput:
      allOf: 
        - $ref: "#/components/schemas/Order"
        - type: object
          required:
            - total
            - status
            - details
    CustomerUser:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        phoneNumber:
          type: string
          example: "+1234567890"
        password:
          type: string
          format: password
          example: "securepassword"
        address:
          type: string
          example: "123 Main St, Springfield, USA"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        birthDate:
          type: string
          format: date
          example: "1990-05-15"
        verificatedAt:
          type: string
          format: date-time
          example: "2024-12-02T12:34:56.789Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-12-02T12:34:56.789Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-12-02T12:34:56.789Z"
        lastLoginAt:
          type: string
          format: date-time
          example: "2024-12-02T12:34:56.789Z"
        verification_token:
          type: string
          example: "a1s2d3f4g5h6"
        verification_expires_at:
          type: string
          format: date-time
          example: "2024-12-02T12:34:56.789Z"
        reset_password_token:
          type: string
          example: "a1s2d3f4g5h6"
        reset_password_expires_at:
          type: string
          format: date-time
          example: "2024-12-02T12:34:56.789Z"
        roles:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Role'
      required:
        - email
        - password
        - firstName
        - lastName
        - birthDate
      xml:
        name: customerUser
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    CartDetail:
      type: object
      properties:
        productId:
          type: number
          description: ID of the product to add.
        quantity:
          type: integer
          description: Quantity of the product to add.
      required:
        - productId
        - quantity
    Cart:
      type: object
      properties:
        cartId:
          type: number
        cartDetails:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/CartDetail"
        total:
          type: number
          format: float
    Role:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    RoleInput:
      allOf: 
        - $ref: "#/components/schemas/Role"
        - type: object
          required:
            - name
    Payment:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the payment.
          example: 1
        orderId:
          type: integer
          description: Reference to the associated order.
          example: 123
        stripePaymentId:
          type: string
          description: Unique identifier for the payment in Stripe.
          example: "pi_1Hddc2IeZvKYlo2C0J12yfA3"
        amount:
          type: number
          format: float
          description: The total amount of the payment.
          example: 500.00
        status:
          type: string
          description: The current status of the payment.
          enum:
            - pending
            - completed
            - failed
          example: "pending"
        created_at:
          type: string
          format: date-time
          description: The timestamp when the payment was created.
          example: "2024-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the payment was last updated.
          example: "2024-01-02T15:30:00Z"
    PaymentInput:
      allOf: 
        - $ref: "#/components/schemas/Payment"
        - type: object
          required:
            - orderId
            - amount
            - status
  securitySchemes:
    store_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://https://jffc-dev.github.io/nerderyAPI/
          scopes:
            write:products: modify products in your account
            read:products: read your products
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT